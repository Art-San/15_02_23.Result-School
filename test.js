// src="https://hamsterkombatgame.io/clicker/#tgWebAppData=query_id%3DAAHMWgYrAAAAAMxaBis9Shya%26user%3D%257B%2522id%2522%253A721836748%252C%2522first_name%2522%253A%2522%25D0%2590%25D0%25BB%25D0%25B5%25D0%25BA%25D1%2581%25D0%25B0%25D0%25BD%25D0%25B4%25D1%2580%2522%252C%2522last_name%2522%253A%2522%25D0%2590%2522%252C%2522username%2522%253A%2522gruzz70tomsk%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522allows_write_to_pm%2522%253Atrue%257D%26auth_date%3D1721380364%26hash%3D840e29abc0617def351ea805e3f012386a10a6fe5b0134d109a9f9be07a57565&tgWebAppVersion=7.6&tgWebAppPlatform=web&tgWebAppThemeParams=%7B%22bg_color%22%3A%22%23ffffff%22%2C%22button_color%22%3A%22%233390ec%22%2C%22button_text_color%22%3A%22%23ffffff%22%2C%22hint_color%22%3A%22%23707579%22%2C%22link_color%22%3A%22%2300488f%22%2C%22secondary_bg_color%22%3A%22%23f4f4f5%22%2C%22text_color%22%3A%22%23000000%22%2C%22header_bg_color%22%3A%22%23ffffff%22%2C%22accent_text_color%22%3A%22%233390ec%22%2C%22section_bg_color%22%3A%22%23ffffff%22%2C%22section_header_text_color%22%3A%22%233390ec%22%2C%22subtitle_text_color%22%3A%22%23707579%22%2C%22destructive_text_color%22%3A%22%23df3f40%22%7D"

// query_id: Идентификатор запроса, который, вероятно,
// используется сервером для отслеживания конкретных событий или действий пользователя.

// user: Объект JSON, содержащий информацию о пользователе:

// id: Уникальный идентификатор пользователя.

// first_name: Имя пользователя.

// last_name: Фамилия пользователя.

// username: Имя пользователя в системе.

// language_code: Код языка, используемый пользователем.

// allows_write_to_pm: Параметр, указывающий,
// разрешено ли пользователю отправлять личные сообщения.

// auth_date: Дата и время аутентификации пользователя.

// hash: Хэш, возможно,
// используемый для проверки подлинности данных пользователя.

// tgWebAppVersion, tgWebAppPlatform, tgWebAppThemeParams:
// Параметры, связанные с версией, платформой и темой веб-приложения Telegram,
// которое, судя по всему, интегрировано с сайтом.

// Таким образом, эта ссылка не только направляет пользователя к игре,
// но и передает значительную информацию о нем самому сайту,
// что может быть использовано для персонализации пользовательского опыта,
// аутентификации или других целей.

'use strict'
// console.log('this is :', this)
// 2. script или module
// хост среда содержит в нуьтри себя runtime и внутри этого runtime выполняет наш код, например браузер это хост, нода это хост
// хост среда по умолчанию имеет возможность установить свое значение THIS
// v8 --module = undefined // не в script, module
// браузере = Window {...}
// node = {}
// v8 = [object global] // script
// Значение для This определено спецификацией хост среда

// 3. function Environment
function doLogThis() {
  var doArrowThing = () => console.log('this is: ', this)
  doArrowThing()
}
doLogThis()

// 1. Вызов функции это именно то что приводит к тому
// что THIS начинает быть связанным с каким то значением

// 2. Если эта функция стрелочная то ана этого не делает

// 3. Прмемер: Представте что любая обычная(нормальная не =>) функция имеет всегда один аргумент, это THIS
// Номальная

// ОТ Phind
// 1. В JavaScript, контекст this внутри функции определяется тем, как и где функция была вызвана.
// Для обычных функций (не стрелочных), this устанавливается в зависимости от контекста вызова:
// *** Если функция вызывается как метод объекта, this будет ссылаться на этот объект.
// *** Если функция вызывается как конструктор (с использованием new), this будет ссылаться на создаваемый экземпляр объекта.
// *** Если функция вызывается как обычная функция (не как метод или конструктор),
// this будет равен глобальному объекту (window в браузерах, global в Node.js)
// в небрежном режиме или undefined в строгом режиме ('use strict').

//
// 2. Стрелочные функции в JavaScript не имеют собственного this.
// Вместо этого они захватывают значение this из окружающего лексического контекста,
// в котором они были объявлены. Это означает, что this внутри стрелочной функции
// всегда будет указывать на то же значение, что и this в месте, где функция была создана,
// независимо от того, как и где функция вызывается позже.

// Обычная функция
function normalFunction() {
  console.log(this)
}
normalFunction() // Выведет глобальный объект или undefined в строгом режиме

// Стрелочная функция
const arrowFunction = () => {
  console.log(this)
}
arrowFunction() // Зависит от контекста, в котором была создана

// 40:29

// Типы данных
// https://www.youtube.com/watch?v=atBBDQXDSGk // 52:08
// На 55:30 мин Мурыч говорит все типы данных ссылочные, и говорит что это закреплено в сецификации ECMAScript 5.2
// 1. boolean
// 2. string
// 3. number
// 4. BigInt
// 5. symbol

// 6. null  // примитивные
// 7. undefined // примитивные

// 8. object

// Мурыч говорит все типы данных ссылочные,
// и говорит что это закреплено в спецификации ECMAScript указывая на следующий параграф 5.2
// и обзац
// "Algorithm steps may declare named aliases for any value using the
// form “Let x be someValue”.These aliases are reference-like in that both x and someValue
// refer to the same underlying data and modifications to either are visible to both.
// Algorithm steps that want to avoid this reference-like behaviour should explicitly
// make a copy of the right-hand side: “Let x be a copy of someValue” creates a shallow copy of someValue."

// gpt
// Мурыч говорит об определённом аспекте работы алгоритмов в спецификации ECMAScript,
// но это не значит, что все типы данных в JavaScript являются ссылочными.

// Давайте разберёмся.

// 1. Что говорит параграф в спецификации:
// Параграф из ECMAScript (глава 5.2) описывает, как алгоритмы могут создавать "именованные псевдонимы"
// для любых значений. Эти псевдонимы ведут себя как ссылки, потому что и псевдоним,
// и исходное значение ссылаются на одни и те же данные. Если вы измените данные через один псевдоним,
// изменения будут видны и через другой.

// 2. Примитивные типы данных:
// Примитивные типы данных в JavaScript — такие как строки, числа,
// булевы значения, null, undefined, и символы — передаются по значению,
// а не по ссылке.

// Пример:
var a = 10
var b = a
b = 20

console.log(a) // 10
console.log(b) // 20

// Здесь a и b хранят разные значения,
// а не ссылаются на один и тот же объект.
// Изменение b никак не влияет на a.

// 3. Ссылочные типы данных:
// Объекты, массивы и функции — это ссылочные типы. Они действительно передаются по ссылке,
// и изменения в одном месте будут отражаться во всех других местах, где используется эта ссылка.

// Пример:
var obj1 = { name: 'Alice' }
var obj2 = obj1

obj2.name = 'Bob'

console.log(obj1.name) // 'Bob'
console.log(obj2.name) // 'Bob'

// В этом примере obj1 и obj2 ссылаются на один и тот же объект в памяти.
// Изменение через obj2 отразилось и на obj1.

// 4. Что же описывает параграф из спецификации?

// Параграф говорит о том, что когда алгоритм в ECMAScript создаёт псевдоним (alias) для значения,
// он ведёт себя как ссылка, то есть оба (и псевдоним, и исходное значение) указывают на одни и те же данные.
// Это справедливо как для примитивов, так и для объектов, когда такие псевдонимы создаются в алгоритмах.

// Однако это описание относится к поведению на уровне реализации алгоритмов в спецификации,
// а не к повседневному коду JavaScript, с которым работают разработчики.

// 5. Вывод:
// Мурыч неправ в том, что все типы данных в JavaScript являются ссылочными в обычном понимании.
// Примитивные типы данных передаются по значению, тогда как объекты, массивы и функции передаются по ссылке.
// Параграф, на который он ссылается, относится к специфике работы алгоритмов в спецификации,
// а не к типам данных в обычном JavaScript-коде.

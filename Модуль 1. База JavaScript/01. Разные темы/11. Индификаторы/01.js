// Производительность JavaScript "переменных" / идентификаторов

// https://www.youtube.com/watch?v=IvlpOQfKi9U
// 1. идентификаторы или Переменные
// 2. Имя идентификатора
// 3. Место.область определения идентификатора

// Переменная или идентификатор

// Переменная - это программистский жаргон,
// который, используя аналогию, с коробочкой,
// в которую положили значение, пытается заявить
// принцип оперирования данными в языках
// высокого уровня.

// Подобное определение не отвечает
// тому как работает JavaScript.
// Принципы работы описаны в спецификации
// в разделе работы с Идентификаторами

// Имя идентификатора

var someName = 'murych'
// создали два объекта в куче для строк: "someName" и "murych"
let murych = 'class'
// создали ноль объектов в куче: так как "murych" определен был
// выше
// а "class" был уже определен ранее, так как это является
// предопределенным ключевым словом
function log() {}
// так-же ноль, поскольку имена property объектов - те же строки

// Место/Область определения

// Наиболее быстрым вариантом, является ситуация, когда
// идентификатор используется ТОЛЬКО там где он был заявлен:
function doThing(theParam) {
  var theSomeThing = 123
  return theSomeThing + theParam
}

// Место/Область определения

// Наиболее медленным вариантом, является ситуация, когда
// идентификатор используется за пределами той функции, где он был заявлен:

var theSomeThing = 123
theSomeThing = 5 // Уже все плохо
function doThing() {
  return theSomeThing + 1
}

// Идентификаторы

// 1. Видео с разбором примеров на уровне байт-кода можно
// посмотреть тут: https://www.youtube.com/watch?v=biy50-ssgVQ

// 2. ECMAScript Identifiers:
// https://tc39.es/ecma262/multipage/ecmascript-language-expressions.
// html#sec-identifiers

// 3. ECMAScript Environment Records:
// https://tc39.es/ecma262/multipage/executable-code-and-execution-c
// ontexts.html#sec-environment-records

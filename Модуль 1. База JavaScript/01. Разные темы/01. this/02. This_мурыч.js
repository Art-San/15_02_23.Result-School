// https://www.youtube.com/watch?v=4tg4qokVS9o&t=4940s
// Что такое this?
// this - это выражение языка JavaScript, поведение которого очень похоже
// на поведение идентификатора, с той лишь разницей, что связать значение
// с this, мы можем только особой формой вызова normal function

// ========================================================
// Что такое normal function ?
// Поскольку способов определить normal function большое множество,
// проще всего о них думать как о всех функциях, которые отличаются от arrow function.

// То есть это все функции, у которых между аргументами и их телом
// функции отсутствует символьная пара  =>

//================================================
// какие формы вызова меняют this?
// 1. Вызов любой normal function, по умолчанию, связывает this с undefined

// 2. Ключевое слово new, указанное перед вызовом функции, например new doThing(); свяжет this с normal object без заданных property

// 3. Используя call, apply или bind - мы можем задать this явным образом
// doThing.call( thisArg, … args);
// doThing.apply( thisArg, … args);
// doThing.bind( thisArg, … args)();

// 4. И в случае вызова функции в dot нотации, this будет связан со значением  идентификатора, который стоит перед точкой:
// theObj.doThing();

//====================================================
// this and api
// Вызов любого внешнего API может связывать this со значением,
// которое пришло на ум создателям API.
// В любой нотации и формах.

// Как реализовано конкретное  API, можно узнать только из
// его документации.

// Например в html5 есть API addEventListener, которое позволяет
// привязывать к определенным событиям стандарта HTML5 функцию - обработчик.
// Описание этого API находится вот тут:
// https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke
// Где прямо заявляется о том, что вызов обработчика,
// будет осуществлен с привязкой this к объекту событие которого он обслуживает.

// ====================================================
// вместо итого

// 1. this в JavaScript это не контекст. Никогда им не был. Никогда им не будет.

// 2. this в JavaScript это особый идентификатор,
// который определен локально для всех normal function
// и по умолчанию задан как undefined
// для strict mode или как global object для non strict mode.

// 3. Значение this для функции, может быть изменено только
// в момент вызова этой функции и зависит от формы/способа ее вызова.

// 4. Внешнее API может связать this с произвольным
// значением в зависимости от фазы луны или левой пятки автора API.
// Но только в случае, если это будет normal function
// для которой мы не задали this посредством метода bind

// ============================================================
// Особенности this в non strict mode
// При вызове normal function, this связывается не с undefined, а с global object
// В случае вызова с использованием dot нотации: theObj.doThing()
// this будет будет связан со значением ToObject( theObj );
// Например:

String.prototype.doThingStrict = function () {
  'use strict'
  console.log('this is:', this instanceof Object, this)
}

String.prototype.doThing = function () {
  console.log('this is:', this instanceof Object, this)
}

Number.prototype.doThing = function () {
  'use strict'
  console.log('this is:', this)
}

// "Yo".doThingStrict(); 	// this будет связан со значением "Yo"
// "Yo".doThing(); 		// this будет связан со значением new String("Yo")
;(12).doThing()
// doThing();

// Наследование — это возможность порождать один класс от другого
// с сохранением всех свойств и методов класса предка, добавлять
// при необходимости новые свойства и методы

// от GPT
// Наследование — это механизм объектно-ориентированного программирования,
// позволяющий создавать новый класс (называемый производным классом или классом-наследником)
// на основе существующего класса (называемого базовым классом или классом-предком).
// При этом производный класс наследует все свойства и методы базового класса,
// и при необходимости можно добавлять или переопределять свойства и методы в производном классе.

// Рассмотрим пример, где мы создадим базовый класс Animal,
// а затем создадим производный класс Dog, который унаследует
// все свойства и методы Animal и добавит свои.

// Базовый класс
class Animal {
  constructor(name, age) {
    this.name = name
    this.age = age
  }

  speak() {
    return `${this.name} издает звук.`
  }
}

// Производный класс
class Dog extends Animal {
  constructor(name, age, breed) {
    super(name, age) // Вызов конструктора базового класса
    this.breed = breed // Новое свойство
  }

  // Переопределение метода базового класса
  speak() {
    return `${this.name} лает.`
  }

  // Новый метод, специфичный для Dog
  fetch() {
    return `${this.name} приносит палку.`
  }
}

const myDog = new Dog('Барсик', 3, 'Дворняга')
console.log(myDog.speak()) // Барсик лает.
console.log(myDog.fetch()) // Барсик приносит палку.
console.log(myDog.name) // Барсик
console.log(myDog.age) // 3
console.log(myDog.breed) // Дворняга

// Объяснение примера:

// 1. Animal — это базовый класс, который содержит общие свойства name и age, а также метод speak.
// 2. Dog — это производный класс, который наследует свойства и методы базового класса Animal.
// В классе Dog добавлено новое свойство breed и новый метод fetch, а также переопределён метод speak,
// чтобы он возвращал более специфичное сообщение.

// Таким образом, наследование позволяет нам создать класс Dog,
// который использует все возможности класса Animal,
// добавляя свои специфические особенности и поведение.

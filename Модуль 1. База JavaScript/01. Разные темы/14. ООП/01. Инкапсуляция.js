// https://www.youtube.com/watch?v=-UI2NXz0LBs

// Инкапсуляция — механизм, который связывает код и данные им обрабатываемый,
// а также скрывающий внутреннее данные компонента и детали его реализации
// от других объектов приложения и предоставляющей
// набор методов для взаимодействия с ним.

// Объект содержит в себе логику(методы) и данные(поля)
// Внутреннее данные снаружи никто поменять не может
// Внутренние данные меняются только через методы, представленными самим классом

// Каждый класс должен предстовлять черный ящик

// Сделай что-то    ******************
// ------------->   *       ******   *
// Измени что-то    *       ?    ?   *
// ------------->   *            ?   *
//     Дай что-то   *          ?     *
// <-------------   *        ?       *
//                  *                *
//                  *        *       *
//                  ******************

// Внешний класс может запросить данные, но он не может их изменить

// Каждый класс должен быть изолирован от внешних воздействий. Другие классы могут влиять
// на  него только через методы которые он им и предоставил

// К состоянию объект имеет доступ сам объект

// от GPT

// Инкапсуляция — это механизм, который связывает код и данные, которые он обрабатывает,
// скрывая внутренние данные компонента и детали его реализации от других объектов приложения.
// В объекте данные (поля) и логика (методы) объединены. Внутренние данные объекта не могут
// быть изменены напрямую извне; изменение возможно только через методы,
// предоставляемые самим классом. Эти методы обеспечивают безопасное и контролируемое взаимодействие с данными.

// 1. Объединение логики и данных: Это подчеркивает, что объект — это единая сущность,
// которая не только хранит данные, но и управляет ими через свои методы.
// Это делает объекты самодостаточными и легко управляемыми единицами.

// 2. Защита внутренних данных: Ваше дополнение акцентирует внимание
// на важности защиты данных от прямого доступа и изменения извне,
// что является основой концепции инкапсуляции.

// 3. Методы как интерфейс взаимодействия: Описание того, что внутренние данные
// могут изменяться только через методы, предоставляет четкое понимание того,
// как инкапсуляция контролирует доступ к данным и управление ими.

// Пример на JavaScript с учетом вашего определения:

class Account {
  #balance // Приватное поле

  constructor(initialBalance) {
    this.#balance = initialBalance
  }

  deposit(amount) {
    if (amount > 0) {
      this.#balance += amount
    }
  }

  withdraw(amount) {
    if (amount > 0 && amount <= this.#balance) {
      this.#balance -= amount
    }
  }

  getBalance() {
    return this.#balance
  }
}

const myAccount = new Account(100)
myAccount.deposit(50)
myAccount.withdraw(30)
console.log(myAccount.getBalance()) // 120

// В этом примере:
// Поле #balance скрыто от внешнего доступа.

// Методы deposit, withdraw, и getBalance предоставляют контролируемый
// способ взаимодействия с внутренним состоянием объекта.

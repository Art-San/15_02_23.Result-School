// В TypeScript type и interface оба используются
// для определения пользовательских типов,
// но они имеют некоторые различия в использовании и возможностях.
// Вот несколько ключевых моментов, когда выбирать между type и interface:

// Использование interface:
// 1. Расширение типов: Интерфейсы могут быть расширены
// с помощью ключевого слова extends, что позволяет создавать иерархию типов.

// 2. Объединение типов: Интерфейсы могут быть объединены
// с помощью объединения типов (&), что позволяет комбинировать
// несколько интерфейсов в один.

// 3. Индексные сигнатуры: Интерфейсы могут иметь индексные сигнатуры,
// что позволяет определить типы для объектов с динамическими ключами.

// 4. Применение к классам: Интерфейсы могут быть применены
// к классам для определения формы экземпляров класса.

// Пример использования interface:

interface User {
  name: string
  age: number
}

interface Admin extends User {
  isAdmin: boolean
}

// class UserClass implements User {
//   name: string
//   age: number
// }

class AdminClass implements Admin {
  name: string
  age: number
  isAdmin: boolean
}

// Использование type:

// 1. Литеральные типы: type может быть использован для
// определения литеральных типов, которые ограничивают значение
// переменной до конкретного значения.

// 2. Объединение и пересечение типов: type может быть использован
// для объединения (|) и пересечения (&) типов, что позволяет
// создавать более сложные типы.

// 3.  Условные типы: type может быть использован для
// создания условных типов, что позволяет определить тип на основе условий.

// 4.  Маппинги типов: type может быть использован для
// создания маппингов типов, что позволяет преобразовывать свойства типа.

// Пример использования type:

type User = {
  name: string
  age: number
}

type Admin = User & {
  isAdmin: boolean
}

type UserOrAdmin = User | Admin

type UserKeys = keyof User // "name" | "age"

type ConditionalType<T> = T extends string ? string : number

type MappedType = {
  [K in keyof User]: User[K] | null
}

// Когда выбирать type или interface:

// 1. Используйте interface, когда вам нужно определить форму объекта,
// который будет использоваться в классах или когда вам нужно расширить
// или объединить типы.

// 2. Используйте type, когда вам нужно использовать более сложные типы,
// такие как литеральные типы, условные типы, маппинги типов или когда
// вам нужно объединить или пересечь типы.

// В целом, interface предпочтительнее для большинства случаев использования,
// особенно когда вы работаете с объектами и классами. type предпочтительнее
// для более сложных или абстрактных типовых операций.

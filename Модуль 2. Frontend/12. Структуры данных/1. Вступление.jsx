// В предыдущих уроках мы изучили, что такое компоненты, 
// как их строить, как они взаимодействуют друг с другом и так далее. 
// Этого достаточно для построения простого React-приложения. 
// Чтобы создавать сложные приложения, нужно уметь работать 
// с данными и создавать оптимальные структуры, 
// согласно требованиям вашего проекта. 

// Может показаться, что проектирование структуры данных 
// не из мира JavaScript и React, однако можно привести 
// цитату из одной из самых популярных библиотек 
// для работы со state-менеждментом Redux:

// … рекомендуемый подход к управлению реляционными 
// или вложенными данными в хранилище Redux заключается в том, 
// чтобы рассматривать часть вашего хранилища,
//  как если бы это была база данных, 
//  и хранить эти данные в нормализованной форме.

// Подробнее прочитать про обоснование такого подхода можно по ссылке.
// https://redux.js.org/usage/structuring-reducers/normalizing-state-shape


// Созданные структуры данных хранятся внутри нашего приложения и, 
// следовательно, в памяти устройства пользователя. 
// Данные нужно получать, обрабатывать и изменять. 
// От того, насколько грамотно создана структура данных, 
// будет зависеть удобство вашей работы 
// с ней и пользовательский опыт клиента. 
// Чем лучше организована структура данных, 
// тем быстрее работает ваше приложение на устройстве пользователя. 

// Чтобы следовать рекомендациям того же Redux, мы должны понимать, 
// что такое структура данных, какие структуры бывают и какие понятия нужно знать. 
// С этого мы и начнём. 
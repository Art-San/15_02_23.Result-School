// В нашем примере мы передаем атрибуты одной сущности - menuItems. 
// Но с расширением количества полей у объекта menuItem (элемент массива menuItems) 
// нам нужно всё больше передавать атрибутов в компонент. Это неудобно. 
// Самое очевидное, что можно сделать - передать menuItems как props.

<NavLink
  key={item.id}
  menuItem={item}
  onActiveChange={handleItemClick}
/>


// Но в этом случае мы получим большую вложенность и, например, вывод 
// атрибута text станет таким:

// // Было
// <a>{props.text}</a>

// // Стало
// <a>{props.menuItem.text}</a>

// И так с каждым атрибутом. Так мы получим менее аккуратный код. 
// Можно сделать лучше.

// В React есть специальный синтаксис и с помощью Spred-оператора 
// мы можем передать сразу все поля из объекта в атрибуты

{/* <NavLink
  key={item.id}
  {...item}
  onActiveChange={handleItemClick}
/> */}

// ********************************
// Особенность такого метода
// *****************************

// У такого способа есть недостаток. Что такое props?! Это объект. 
// сли мы устанавливаем значение какого-то поля объекта и потом пытаемся сделать это ещё раз, 
// то поле просто перезаписывается.

const obj = {
    example: 1
   }
   
   obj.example = 2
   
   console.log(obj.example) // 2

//    В практическом смысле это значит, что есть вероятность того, 
//    что одно значение props перезапишет другое.

const example = {
    id: 1,
    testField: 'testField from object'
   }
   
   return <ExampleComponent testField="testField from props" {...example} />

//    В данном примере в компоненте ExampleComponent props.testField 
//    будет равен "testField from object", так как значение из объекта 
//    заменило атрибут.

// Тебе нужно помнить о такой особенности и выставлять нужный порядок передачи 
// атрибутов, или убирать из объекта ненужные поля.
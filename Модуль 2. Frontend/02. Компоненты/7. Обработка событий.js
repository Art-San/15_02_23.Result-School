// Атрибутами элементов в React могут быть и обработчики событий, 
// которые будут исполняться при вызове соответствующего события. 
// Например, при нажатии на тег будет вызвано событие onClick, и для, того, 
// чтобы обработать это событие, мы должны передать функцию.

const handleClick = (e) => {
    // do something...
  }

  <div onClick={handleClick}></div>

//   Добавим в наш пример обработку события при нажатии на кнопку. 
//   Давай сделаем ещё один компонент. Пусть это будет меню, 
//   которое мы будем открывать и закрывать.

const Navbar = () => {
    const handleMenuClick = () => {}
  
    return (
      <div>
        <button 
          className="btn btn-sm btn-primary" 
          onClick={handleMenuClick}
        >
          меню
        </button>
        <div>содержание меню</div>
      </div>
    );
  };

//   В onClick мы передаем именно ссылку на функцию (референс), 
//   а не вызываем её, как мы делали в атрибутах. 
//   Если бы мы вызвали ее, то она сработала сразу при монтировании компонента, 
//   а не при нажатии на кнопку.

//     Давай напишем функцию handleMenuClick() так, 
//     чтобы изменялась переменная open. 
//     Создадим переменную и изменим функцию.

const Navbar1 = () => {
  let open = false;
  const handleMenuClick = () => {
    // Переключаем на противоположное значение true -> false, false -> true
    open = !open; 
    console.log('open', open);
  };
  return (
    <div>
      <button className='btn btn-sm btn-primary' onClick={handleMenuClick}>
        меню
      </button>
      {open && <div>содержание меню</div>}
    </div>
  );
};

//   При использовании handleMenuClick() мы увидим в консоли, 
//   что переменная open будет изменяться, 
//   но содержание меню не будет видно на странице. Почему? 



// Сейчас, в начале работы приложения, рендер выполняется один раз при переменной open 
// равной false и больше не обновляется. Следовательно, нам нужен механизм, 
// который будет вызывать повторный рендеринг компонента при изменении переменной. 
// Для этого нам нужно познакомиться с понятием "состояние" и тем, как с ним работать в React.
// В объекте history есть различные методы для перемещения между страницами. 
// Подробно про history API можно прочитать по ссылке. 
// https://github.com/remix-run/history/blob/main/docs/api-reference.md
// Сейчас нам интересны методы push() и replace(). 

// С помощью этих методов можно направлять пользователя на какую-либо страницу. 
// Различие этих методов представим на схеме:

// Зачем может понадобиться replace()?! Например, 
// ваш пользователь пришёл в галерею фотографий с главной страницы. 
// Определяется, какое фото показать по URL, и при перелистывании фото меняется адрес. 
// При использовании push(), если пользователь захочет вернуться назад на главную страницу,
//  то ему нужно будет нажать в браузере “назад” столько раз, сколько он посмотрел фото. 
//  Но, если мы бережем посетителя, то воспользуемся методом replace() 
//  для смены адреса и пользователь сможет вернуться на главную страницу за 1 клик. 
//  То же может произойти с фильтрами товаров, если мы храним его состояние в адресной строке. 

// Давай реализуем с помощью метода push() кнопку, чтобы перейти из записи в список записей. 
// Перейдём компонент Posts и напишем:

const Posts = ({ match, location, history }) => {
    // ....

    // Создаём функцию для перехода к списку постов
    const handleMoveToList = () => {
        // Вызываем метод истории
        history.push("/posts");
    };

    return (
        <>
            {showOffer && <div>Специальное предложение</div>}
            {postId ? (
                <Post
                    goToList={handleMoveToList}
                    post={getPost(postId)}
                    id={postId}
                />
            ) : (
                <PostList posts={posts} />
            )}
        </>
    );
};

// И в Post создаём кнопку для перехода к списку:

import React from "react";

const Post = ({ post, id, goToList }) => {
    return (
        <>
            <button onClick={goToList}>
                В список записей
            </button>
            <h1>{post ? post.title : `post with id: ${id} is not found`}</h1>
        </>
    );
};

export default Post;

// Теперь пользователь по кнопке сможет перейти в список записей:

// Но сейчас, если пользователь попал на несуществующий пост, 
// то потом он может на него вернуться. Давай сделаем так, что, если он попадет 
// на страницу несуществующего поста, то он не сможет вернуться. 
// Функция для перемещения изменится вот так:

// Передаём значение и проверяем есть ли запись. Если нет то заменяем историю
const handleMoveToList = (hasPost) => {
    hasPost ? history.push("/posts") : history.replace("/posts");
};

// В Post изменяем вызов:

<button onClick={() => goToList(post)}>
    В список записей
</button>

// Передаём post. Если он есть, то будет вызван push(), иначе - replace().
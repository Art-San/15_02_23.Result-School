// Для раскрытия этой темы сперва поговорим о том, что такое HTTP.
// Простыми словами, HTTP — это протокол для передачи данных.
// Под протоколом подразумевается ни что иное, как набор правил,
// который определяет, как программы будут передавать данные между друг другом.

// HTTP-протокол подразумевает, что существует:

// 1. сервер, который ожидает соединения для получения запроса,
// обработки и возврата ответа

// 2. клиент (потребитель), которые инициирует соединение, посылает запрос и ожидает ответ

// Одной из особенностей HTTP является возможность указать в запросе формат,
// кодировку, язык, заголовки и т.д. Именно благодаря возможности указания
// способа кодирования сообщения, клиент и сервер могут обмениваться
// двоичными данными (например, файлами), хотя данный протокол является текстовым
// (помнишь, мы говорили о сериализации?!).

// В такой модели HTTP-клиент — это программа,
// библиотека или метод браузерного API, который:

// 1. отправляет запрос с какой-то информацией на сервер
// (часто это ресурс, на который указывает URI

// 2. получает данные ответа от сервера

// В браузерном API есть встроенные HTTP-клиенты. Вместе с Promise,
// в браузере появился метод fetch(), как раз с помощью него запрашиваются
// данные во многих современных приложениях. Простой пример:

const data = { username: 'example' };

// Первый параметр — адрес запроса
fetch('https://example.com/api/v1/myent', {
  method: 'POST', // HTTP-метод
  // Заголовки
  headers: {
    // Заголовок Content-Type для указания того, что содержиться в запросе
    'Content-Type': 'application/json', 
  },
  body: JSON.stringify(data), // Сериализованные данные
})
  /**
   * Когда будет получен ответ, в then() будет получен объект response.
   * Для некоторых ответов (чаще свего) есть метод json(),
   * который превратит ответ в обычный объект.
   */ 
  .then((response) => response.json()) 
  .then((data) => {
    console.log('Success:', data);
  })
  // catch() будет вызван, если произойдёт ошибка
  .catch((error) => {
    console.error('Error:', error);
  });


//   Однако к fetch() есть много обоснованной критики:
// 1. неудобная система отлова ошибок

// 2. неудобство разработки (например, нельзя сделать
// экземпляр fetch() с заголовками авторизации)

// 3. пока поддерживается не всеми браузерами,
// в частности IE11 (посмотреть текущую поддержку можно здесь)

// 4. встречаются некоторые ошибки


// Также в браузерах есть прошлый HTTP-клиент — XMLHttpRequest (XHR).
// У него лучше браузерная поддержка, но он несовременный и не поддерживает Promise.
// Поэтому была создана библиотека-абстракция над XMLHttpRequest,
// которая основана на Promise и добавляет дополнительные полезные
// инструменты — это библиотека Axios. https://axios-http.com/

// Axios — самая популярная библиотека для работы с HTTP-запросами в JS.
// У неё есть ряд преимуществ: 

// 1. Работает и в браузере и в Node.js
// 2. В браузере работает на основе XMLHttpRequest (XHR)
// 3. Кроссбраузерность
// 4. Поддерживает промисы
// 5. Автоматическая трансформация (сериализация) данных запроса и ответа
// 6. Поддержка отмены запроса
// 7. Добавляет интерсепторы (interceptors) запроса и ответа 
// (поработаем с ними в уроке по авторизации / регистрации)

// Кроме того, можно создавать экземпляры Axios. Например,
// для передачи заголовков по умолчанию или задания базового URL для всех запросов API:

const request = axios.create({
    baseURL: 'https://my-dimain/api/',
    headers: { 'X-API-KEY': 'abcdef12345' }
  });
  
  // Использование 
  const getUsers = async () => request.get('users').then(({ data }) => data);
  
  // Будет отправлен GET-запрос на адрес https://my-dimain/api/users
  // При ответе вернёт полученные данные в формате объекта 
  // (если ответом был JSON)

//   В дальнейшем мы будем использовать именно Axios для работы с HTTP-запросами. 

// Представим, что мы смотрим видео на YouTube. 
// Нам понравилось видео, и мы ставим лайк. 
// Мы сразу видим, что он окрасился в красный цвет. 
// В это время сам YouTube отправил запрос на сервер, 
// чтобы лайк был учтён. Мы быстро перезагружаем страницу, 
// но почему-то лайк исчез. Перезагружаем ещё раз, лайк появился. 
// Это произошло, так как сервер YouTube ещё не успел так быстро учесть 
// лайк. 

// Такое поведение может быть использовано в приложении осознанно. 
// Например если мы знаем, что обработка на сервере будет занимать 
// некоторое время, а само преждевременное отображение изменений 
// не повлияет на какие-либо важные параметры. В таком случае 
// мы можем сразу обновить наши данные на клиенте и отобразить 
// изменения пользователю, а фоново делать запрос. Можно также 
// предусмотреть откат изменений, если сервер ответил ошибкой

// Пример компонента, который реализует такое поведение:

import React, {useState} from 'react';
import { toast } from 'react-toastify';
import { requestToggleLike } from './api';

export const AddLike = () => {
    const [isLike, setIsLike] = useState(false);

    const likeClass = isLike ? 'liked' : '';
    const text = isLike ? 'Liked' : 'Add Like';

    const handleClick = () => {
      const nextIsLike = !isLike;

      // Сразу отображаем лайк
      setIsLike(nextIsLike);
      requestToggleLike.then().catch(()=>{
          // В случае ошибки возвращаем обратно
          setIsLike(!nextIsLike);
          toast.error('Server error');
      });
    };

    return (
        <button onClick={handleClick} className={likeClass}>
            {text}
        </button>
    );
};

// Такое поведение называет оптимистичным. 
// То, которое мы рассматривали до этого — пессимистичным 
// (то есть сначала ждем полного ответа, 
//     а потом уведомляем пользователя). 
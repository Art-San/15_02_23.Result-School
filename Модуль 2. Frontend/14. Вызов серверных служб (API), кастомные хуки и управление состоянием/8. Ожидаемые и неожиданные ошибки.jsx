// В момент, когда сервер отвечает на наш запрос,
// кроме самих данных, мы получаем от него код статуса состояния. 
// Например, если запрос был обработан корректно,
// то мы получим status code 200. Если ресурс,
// к которому мы обращаемся не найден на сервере,
// то мы получим status code 404.
// Список кодов статусов можно посмотреть по ссылке. https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

// Ошибки описываются кодами 4xx (например 404) и 5xx (например 503):

// 1. Ошибки с кодами 4xx инициирует клиент.
// Например, если доступ к запрашиваемому ресурсу запрещен,
// то будет status code 403. Или, если по запросу пользователя
// ничего не найдено, то будет status code 404.
// Такие ошибки называются клиентскими.

// 2. Ошибки с кодами 5xx возникают вследствие некорректного
// поведения сервера в результате запроса
// (например, status code 503 — сервис недоступен).
// Такие ошибки называются серверными.

// Также ошибки можно разделить на:

// 1. Ожидаемые (expected) — это ошибки, о которых мы знаем,
// что они могут произойти. Например, приложение общается с сервером,
// и вдруг у пользователя пропадает соединение.
// Если мы предусмотрели такой сценарий, то можем вывести
// пользователю сообщение о том, что отсутствует соединение.

// 2. Неожиданные (unexpected) — это ошибки, которых быть не должно,
// но они есть. То есть мы спроектировали, построили
// и протестировали свое приложение, но тут в процессе
// работы у пользователя возникает непредвиденная ошибка
// (например, при отправке запроса сервер недоступен).
// В таком случае, нам, как разработчикам, необходимо
// максимально быстро исправить ошибку.

// Определить в тип ошибки довольно просто. 
// В методе catch() необходимо задать условие, 
// при котором ошибка будет являться ожидаемой / неожиданной. 
// В нашем случае будем считать, что клиентские ошибки 
// (с кодом 4xx) — ожидаемые, а ошибки сервера 
// (с кодом 5xx) — неожиданные. Вернёмся в наш пример 
// с формой заказа и дополним handleSubmit():

const handleSubmit = (e) => {
    e.preventDefault();
    if (isValid) {
        setLoading(true);
        createOrder(values)
            .then((data) => {
                console.log(data);
            })
            .catch((e) => {
                // Проверяем ожидаемая ли ошибка
                const isExpectedError =
                    /**
                     * У объекта ошибки в axios 
                     * есть ошибки, которые будут получены,
                     * если сервер нам ответил (error.response)
                     * Также есть error.request, если мы не получили
                     * данные с сервера. 
                     */
                    // Мы проверяем есть ли ответ сервера:
                    e.response &&
                    // И код статуса больше или равен 400
                    e.response.status >= 400 &&
                    // И код статуса меньше 500
                    e.response.status < 500;
              
            })
            .finally(() => setLoading(false));
    }
};

// И когда мы определили, ошибка является ожидаемой или не ожидаемой,
// то можем в зависимости от этого отображать её:

const handleSubmit = (e) => {
    e.preventDefault();
    if (isValid) {
        setLoading(true);
        createOrder(values)
            .then((data) => {
                console.log(data);
            })
            .catch((e) => {
                const isExpectedError =
                    e.response &&
                    e.response.status >= 400 &&
                    e.response.status < 500;

                if(isExpectedError){
                    // Например вывести ошибку пользователю
                    alert(e.response.data)
                } else {
                    // Тут неожиданная ошибка
                }
              
            })
            .finally(() => setLoading(false));
    }
};

// Чтобы проверить ошибку, мы можем, например, 
// в createOrder() изменить адрес запроса на "/orderss".
// Тогда получим 404 Not found:

export const createOrder = async (order) =>
    // Ошибка: "orderss" вместо "orders"
    request.post("/orderss", order).then(({ data }) => data);

// Обработка ожидаемых и неожидаемых ошибок разная.
// В случае с неожиданными ошибками от нас, как от разработчиков,
// требуются какие-то действия. Например, мы должны понять,
// что наш сервер не работает и принять меры по его восстановлению. 

// И, если в случае с ожидаемыми ошибками у нас сообщение,
// можно сказать, уникальное, и ошибку нужно обрабатывать 
// для каждого конкретного случая (например, для потери соединения, 
// запрещенного доступа и т. д.), то для неожиданных этого не требуется, 
// и их можно обрабатывать более глобально. 
// В Axios для этого есть отдельный способ, 
// с которым познакомимся в следующей части. 
Итоговый код конспекта по ссылке
https://codesandbox.io/s/react-form-1-v3-forked-osrq9h
// Формы в React создаются так же, как и в обычном HTML: 
// создаётся вёрстка формы, полей, 
// кнопка отправить (может быть и кнопка очистить), 
// и в “базовом” сценарии ждём вызова события оправки формы 
// и каким-то образом её обрабатываем. 

// Самая простая форма в React будет выглядеть так:

import React from "react";

const MyForm = () => {
    // обработка события отправки формы
    const handleSubmit = (e) => {
        // do something
    };

    return (
        <form onSubmit={handleSubmit}>
            <input name="email" />
            <input name="password" />
            <button type="submit">Отправить</button>
        </form>
    );
};

// export default MyForm;


// Обрати внимание, что у кнопки “Отправить” указан атрибут type="submit". 
// Так мы говорим, что нажатие этой кнопки должно вызвать у формы событие onSubmit.
// Всё в точности, как в обычном HTML. 
// По умолчанию любая кнопка внутри формы без атрибута type будет восприниматься 
// как кнопка отправки. Это может несколько путать вас при разработке. 
// Примите за правило всегда устанавливать атрибут type у кнопок.

// Атрибут type может быть указан не только у кнопок, 
// но и у полей формы. От атрибута будет зависеть, 
// как поле себя ведёт. По умолчанию <input> 
// воспринимается как обычный текст, т.е. 
// как если бы у него был атрибут type="text". 
// Если нам нужно иное поведение, то следует изменить его тип. 
// Например, если мы хотим скрыть вводимые данные, то нужно указать type="password":


import React from "react";

const MyForm1 = () => {
    const handleSubmit = (e) => {
        // do something
    };

    return (
        <form onSubmit={handleSubmit}>
            <input type="text" name="email" />
            <input type="password" name="password" />
            <button type="submit">Отправить</button>
        </form>
    );
};

// export default MyForm1;

// Так мы получим следующую форму: email password // тоесть горизонтальную

// С другими типами можно ознакомиться самостоятельно по ссылке: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types

// Одной из задач при создании формы является идентификация полей. 
// Сейчас наш пользователь не понимает, что вводить в поля. 
// Для решения этой задачи можно пойти двумя путями: 
// добавление <label> и/или добавление атрибута placeholder у элемента:

// Не копируйте, нужно для примера
import React from "react";

const MyForm3 = () => {
    const handleSubmit = (e) => {
        // do something
    };

    return (
        <form onSubmit={handleSubmit}>
            <p>
                <label htmlFor="email">Email</label> 
                <input id="email" type="text" name="email" />
            </p>
            <p>
                <input
                    placeholder="Email"
                    type="text"
                    name="email"
                />
            </p>
            <p>
                <label htmlFor="password">Пароль</label>{' '}
                <input id="password" type="password" name="password" />
            </p>
            <p>
                <input
                    placeholder="Пароль"
                    id="password"
                    type="password"
                    name="password"
                />
            </p>

            <p>
                <button type="submit">Отправить</button>
            </p>
        </form>
    );
}

// export default MyForm;

// Примечание:    (non-breaking space) – HTML-символ, 
// обозначающий неразрывный пробел. Мы его использовали, 
// чтобы добавить пробел между <label> и <input>. 
// Обычный пробел после преобразования JSX в данном случае проигнорируется.  

// Также в React мы можем использовать конструкцию {' '} для указания явного пробела, 
// как мы это сделали во втором случае. 

// В данном примере мы дважды используем поля, чтобы наглядно показать разницу между подходами:

// В случае с <label> мы:

// 1. Добавляем в верстку отдельный элемент <label>
// 2. У <input> добавляем атрибут id
// 3. Для <label> добавляем атрибут htmlFor с нужным id, 
// чтобы указать на <input>, к которому он относится. 
// При клике на <label> происходит фокус на соответствующий <input>, 
// что довольно удобно.

// Примечание: атрибут htmlFor в JSX является аналогом атрибута for в HTML.

// <!-- JSX -->
// <label htmlFor="..."/>

// <!-- HTML -->
// <label for="..."/>

// Это связано с тем, что ключевое слово for является зарезервированным словом; 
// в JS мы используем htmlFor. По этой же причине для присвоения 
// CSS-класса используется className вместо class.


// Если же мы используем атрибут placeholder, 
// то его значение появляется внутри <input> серым, 
// тусклым цветом. Когда пользователь будет вводить текст, 
// placeholder исчезнет. Это не всегда удобно. 
// Если мы используем только placeholder, 
// то пользователь в процессе заполнения формы может забыть, за что отвечает поле. 

// Про атрибут name у <input>

// Вы уже видели, что в коде есть атрибут name у <input>. 
// Он нужен для идентификации значения поля в форме. 
// Можно было бы подумать, что для этих целей может послужить id, 
// однако это не так. Наглядно можем увидеть на примере:

{/* <form onSubmit={handleSubmit}>
    <label>
        Красный{' '}
        <input type="radio" id="color" />
    </label>

    <br />

    <label>
        Синий{' '}
        <input type="radio" id="color" />
    </label>

    <p>
        <button type="submit">Отправить</button>
    </p>
</form> */}

// Примечание: <input> также можно указывать внутри <label>. 
// В таком случае не нужно будет добавлять htmlFor/for. 


// У нас есть 2 варианта выбора <input type="radio">, 
// и мы добавили им id со значением "color". 
// Такое поле в форме служит для выбора одного из вариантов, 
// если они относятся к одному значению (в данном случае к цвету "color"):

// Но в случае, если мы используем id для идентификации полей, 
// то можно выбрать оба варианта, что является неверным поведением:

// Также, по правилам HTML, значение атрибута id должно быть уникальным на странице. 
// То есть мы не можем двум элементам указать id="color". Если мы перепишем на name:

import React from "react";

const MyForm2 = () => {
    const handleSubmit = (e) => {
        // do something
    };

    return (
        <form onSubmit={handleSubmit}>
            <label>
                Красный{' '}
                <input type="radio" name="color" />
            </label>

            <br />

            <label>
                Синий{' '}
                <input type="radio" name="color" />
            </label>

            <p>
                <button type="submit">Отправить</button>
            </p>
        </form>
    );
};

// export default MyForm2;

// то теперь можно будет выбрать только один элемент:

// Помни, что атрибут id в HTML служит для идентификации 
// конкретного элемента и некорректно его использовать несколько раз на странице.
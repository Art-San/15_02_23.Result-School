// Как мы уже знаем, для создания форм в HTML существует 
// специальный тег <form>. Важно понимать, 
// что нативный HTML также позволяет отправлять
//  формы с помощью специальных атрибутов action и method:

const MyForm1 = () => {
    // ...

    return (
        <form action="html/send-form" method="post">
            {/* ... */}
        </form>
    );
};

// action – ссылка на скрипт, который обрабатывает форму. 
// В данном случае у нас указана относительная ссылка, 
// но также возможно указать полный URL. 
// Пока что это просто информация для ознакомления, 
// отправлять данные по ссылкам будем в следующих уроках.

// method – способ отправки данных на сервер. 
// В нативном HTML есть 2 основных метода: 
// get и post (с ними познакомимся в следующих уроках).

// Но у такого подхода есть очень важная особенность. 
// Отправка формы происходит синхронно, т. е. 
// браузер отправляет запрос по адресу и отрисовывает на экран все, 
// что вернется в ответ. Это приводит к полной перезагрузке страницы.

// В современном React-приложении в большинстве 
// случаев формы отправляются именно асинхронно, 
// используя методы REST API 
// (с этим мы также подробнее ознакомимся в следующих уроках). 

// Процесс отправки начинается в момент события onSubmit 
// и состоит из следующих шагов: 

// 1. Предотвращение перезагрузки страницы
// 2. Обработка данных, например валидация
// 3. Отправка по API
// 4. Получение ответа и обработка результатов (опционально)

// Пока мы разберём первые два пункта. Начнём с предотвращения перезагрузки:


import React, { useState } from "react";
import TextField from "./textField";

const MyForm = () => {
    const [values, setValues] = useState({
        email: "",
        link: "",
        description: ""
    });

    const handleSubmit = (e) => {
        e.preventDefault();
    };

    const handleChange = (e) => {
        const { value, name } = e.target;
        setValues((prev) => ({
            ...prev,
            [name]: value
        }));
    };

    const { email, link, description } = values;

    return (
        <div>
            <h2>Отчёт об ошибке</h2>

            <form onSubmit={handleSubmit}>
                <TextField
                    id="email"
                    name="email"
                    label="Email"
                    value={email}
                    onChange={handleChange}
                />

                <TextField
                    id="link"
                    name="link"
                    label="Ссылка на страницу с ошибкой"
                    value={link}
                    onChange={handleChange}
                />

                <TextField
                    id="description"
                    name="description"
                    label="Описание"
                    value={description}
                    onChange={handleChange}
                />

                <button type="submit">Отправить</button>
            </form>
        </div>
    );
};

// export default MyForm;


// Метод preventDefault() у события сообщает нашему браузеру, 
// что если у события есть действие по умолчанию, 
// то его нужно отменить. 
// В нашем случае нативная отправка формы не будет происходить, 
// и не произойдёт перезагрузка страницы.

// Так как наша форма управляемая, 
// то у нас уже есть все значения в объекте values 
// и мы сразу могли бы отправить их на сервер. 
// Но прежде чем это делать, стоит проверить данные. 
// Этим мы займёмся в следующей части. 